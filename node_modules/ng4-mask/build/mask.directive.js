import { Directive, ElementRef, forwardRef, HostListener, Input, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MaskService } from './mask.service';
var resolvedPromise = Promise.resolve(null);
var MaskDirective = /** @class */ (function () {
    function MaskDirective(_elementRef, _renderer, _maskService) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._maskService = _maskService;
    }
    MaskDirective.prototype.ngOnInit = function () {
        var _this = this;
        resolvedPromise.then(function () { return _this._maskService.applyValueChanges(_this._elementRef.nativeElement); });
    };
    Object.defineProperty(MaskDirective.prototype, "maskExpression", {
        set: function (value) {
            this._maskValue = value || '';
            if (!this._maskValue) {
                return;
            }
            this._maskService.maskExpression = this._maskValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskDirective.prototype, "specialCharacters", {
        set: function (value) {
            if (!value || !Array.isArray(value) || Array.isArray(value) && !value.length) {
                return;
            }
            this._maskService.maskSpecialCharacters = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskDirective.prototype, "patterns", {
        set: function (value) {
            if (!value) {
                return;
            }
            this._maskService.maskAvailablePatterns = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskDirective.prototype, "dropSpecialCharacters", {
        set: function (value) {
            this._maskService.dropSpecialCharacters = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MaskDirective.prototype, "clearIfNotMatch", {
        set: function (value) {
            this._maskService.clearIfNotMatch = value;
        },
        enumerable: true,
        configurable: true
    });
    MaskDirective.prototype.onInput = function (e) {
        if (!this._maskValue) {
            return;
        }
        var el = e.target;
        var position = el.selectionStart;
        var caretShift = 0;
        this._maskService.applyValueChanges(this._elementRef.nativeElement, position, function (shift) { return caretShift = shift; });
        el.selectionStart = el.selectionEnd = position + (
        // tslint:disable-next-line
        e.inputType === 'deleteContentBackward'
            ? 0
            : caretShift);
    };
    MaskDirective.prototype.onBlur = function () {
        this._maskService.clearIfNotMatchFn(this._elementRef.nativeElement);
        this._maskService.applyValueChanges(this._elementRef.nativeElement);
        this._maskService.onTouch();
    };
    /** It writes the value in the input */
    MaskDirective.prototype.writeValue = function (inputValue) {
        this._elementRef.nativeElement.value = this._maskService.applyMask(inputValue, this._maskService.maskExpression);
        this._maskService.applyValueChanges(this._elementRef.nativeElement);
    };
    // tslint:disable-next-line
    MaskDirective.prototype.registerOnChange = function (fn) {
        this._maskService.onChange = fn;
    };
    // tslint:disable-next-line
    MaskDirective.prototype.registerOnTouched = function (fn) {
        this._maskService.onTouch = fn;
    };
    /** It disables the input element */
    MaskDirective.prototype.setDisabledState = function (isDisabled) {
        if (isDisabled) {
            return this._renderer.setAttribute(this._elementRef.nativeElement, 'disabled', 'true');
        }
        return this._renderer.removeAttribute(this._elementRef.nativeElement, 'disabled');
    };
    MaskDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mask]',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return MaskDirective; }),
                            multi: true
                        },
                        MaskService
                    ],
                },] },
    ];
    /** @nocollapse */
    MaskDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: MaskService, },
    ]; };
    MaskDirective.propDecorators = {
        'maskExpression': [{ type: Input, args: ['mask',] },],
        'specialCharacters': [{ type: Input },],
        'patterns': [{ type: Input },],
        'dropSpecialCharacters': [{ type: Input },],
        'clearIfNotMatch': [{ type: Input },],
        'onInput': [{ type: HostListener, args: ['input', ['$event'],] },],
        'onBlur': [{ type: HostListener, args: ['blur',] },],
    };
    return MaskDirective;
}());
export { MaskDirective };
