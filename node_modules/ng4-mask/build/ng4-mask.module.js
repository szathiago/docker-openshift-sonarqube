var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MaskDirective } from './mask.directive';
import { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG } from './config';
var Ng4MaskModule = /** @class */ (function () {
    function Ng4MaskModule() {
    }
    Ng4MaskModule.forRoot = function (configValue) {
        return {
            ngModule: Ng4MaskModule,
            providers: [
                {
                    provide: NEW_CONFIG,
                    useValue: configValue
                },
                {
                    provide: INITIAL_CONFIG,
                    useValue: initialConfig
                },
                {
                    provide: config,
                    useFactory: _configFactory,
                    deps: [INITIAL_CONFIG, NEW_CONFIG]
                },
            ]
        };
    };
    Ng4MaskModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: [MaskDirective],
                    declarations: [MaskDirective]
                },] },
    ];
    /** @nocollapse */
    Ng4MaskModule.ctorParameters = function () { return []; };
    return Ng4MaskModule;
}());
export { Ng4MaskModule };
/**
 * @internal
 */
export function _configFactory(initConfig, configValue) {
    return (typeof configValue === 'function') ? configValue() : __assign({}, initConfig, configValue);
}
